#include <gtest/gtest.h>
#include <testutils.h>
#include <stochtree/log.h>
#include <stochtree/random.h>
#include <memory>
#include <string>
#include <thread>
#include <utility>

namespace StochTree {

namespace TestUtils{

TestDataset LoadSmallDatasetUnivariateBasis() {
  TestDataset output;
  
  // Data dimensions
  output.n = 10;
  output.x_cols = 5;
  output.omega_cols = 1;
  output.rfx_basis_cols = 1;
  output.covariates.resize(output.n, output.x_cols);
  output.omega.resize(output.n, output.omega_cols);
  output.rfx_basis.resize(output.n, output.rfx_basis_cols);
  output.rfx_groups.resize(output.n);
  output.outcome.resize(output.n);
  
  // Covariates
  output.covariates = std::vector<double> {
    0.76696985, 0.63497100, 0.22959875, 0.74108478, 0.61817781, 0.85865784, 0.71922484, 0.74742233, 0.31588370, 
    0.41955411, 0.83894646, 0.15237997, 0.12461481, 0.53356288, 0.88876378, 0.92716760, 0.05469610, 0.87172033, 
    0.39253551, 0.55864950, 0.63649772, 0.38007860, 0.81407372, 0.58940162, 0.51174404, 0.51152940, 0.42850897, 
    0.98791964, 0.83610831, 0.19908607, 0.67477889, 0.64578913, 0.36433653, 0.99952195, 0.88277082, 0.67865624, 
    0.26033638, 0.40180207, 0.01017857, 0.48739217, 0.27398269, 0.21604451, 0.45160373, 0.19142269, 0.12730742, 
    0.28658962, 0.13715010, 0.29145664, 0.19553860, 0.35568569
  };
  
  // Leaf regression basis
  output.omega = std::vector<double> {0.97801674, 0.34045661, 0.20528387, 0.76230322, 0.63244655, 0.61225851, 0.40492125, 0.33112223, 0.86917047, 0.58444831};
  
  // Outcome
  output.outcome << 2.158854445, 1.175387297, 0.40481061,  1.751578365, 0.299641379, 
                    0.347249942, 0.546179903, 1.164750138, 3.389946886, -0.605464414;
  
  // Random effects regression basis (i.e. constant, intercept-only RFX model)
  output.rfx_basis = std::vector<double> {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
  
  // Random effects group labels
  for (int i = 0; i < output.n/2; i++) {
    if (i % 2 == 0) {
      output.rfx_groups[i] = 1;
    } else {
      output.rfx_groups[i] = 2;
    }
  }

  return output;
}

TestDataset LoadSmallDatasetMultivariateBasis() {
  TestDataset output;
  
  // Data dimensions
  output.n = 10;
  output.x_cols = 5;
  output.omega_cols = 2;
  output.rfx_basis_cols = 1;
  output.covariates.resize(output.n, output.x_cols);
  output.omega.resize(output.n, output.omega_cols);
  output.rfx_basis.resize(output.n, output.rfx_basis_cols);
  output.rfx_groups.resize(output.n);
  output.outcome.resize(output.n);
  
  // Covariates
  output.covariates = std::vector<double> {
    0.76696985, 0.63497100, 0.22959875, 0.74108478, 0.61817781, 0.85865784, 0.71922484, 0.74742233, 0.31588370, 
    0.41955411, 0.83894646, 0.15237997, 0.12461481, 0.53356288, 0.88876378, 0.92716760, 0.05469610, 0.87172033, 
    0.39253551, 0.55864950, 0.63649772, 0.38007860, 0.81407372, 0.58940162, 0.51174404, 0.51152940, 0.42850897, 
    0.98791964, 0.83610831, 0.19908607, 0.67477889, 0.64578913, 0.36433653, 0.99952195, 0.88277082, 0.67865624, 
    0.26033638, 0.40180207, 0.01017857, 0.48739217, 0.27398269, 0.21604451, 0.45160373, 0.19142269, 0.12730742, 
    0.28658962, 0.13715010, 0.29145664, 0.19553860, 0.35568569
  };
  
  // Leaf regression basis
  output.omega = std::vector<double> {
    0.9780167, 0.3404566, 0.2052839, 0.7623032, 0.6324466, 0.6122585, 0.4049213, 0.3311222, 0.8691705, 
    0.5844483, 0.3707159, 0.1312134, 0.5614470, 0.2276504, 0.9029984, 0.7448547, 0.2549813, 0.5295535, 
    0.5584614, 0.2365117
  };
  
  // Outcome
  output.outcome << 2.158854445, 1.175387297, 0.40481061,  1.751578365, 0.299641379, 
                    0.347249942, 0.546179903, 1.164750138, 3.389946886, -0.605464414;
  
  // Random effects regression basis (i.e. constant, intercept-only RFX model)
  output.rfx_basis = std::vector<double> {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
  
  // Random effects group labels
  for (int i = 0; i < output.n/2; i++) {
    if (i % 2 == 0) {
      output.rfx_groups[i] = 1;
    } else {
      output.rfx_groups[i] = 2;
    }
  }

  return output;
}

TestDataset LoadMediumDatasetUnivariateBasis() {
  TestDataset output;
  
  // Data dimensions
  output.n = 100;
  output.x_cols = 5;
  output.omega_cols = 1;
  output.rfx_basis_cols = 1;
  output.covariates.resize(output.n, output.x_cols);
  output.omega.resize(output.n, output.omega_cols);
  output.rfx_basis.resize(output.n, output.rfx_basis_cols);
  output.rfx_groups.resize(output.n);
  output.outcome.resize(output.n);
  
  // Covariates
  output.covariates = std::vector<double> {
    0.7669698530, 0.6349709960, 0.2295987540, 0.7410847780, 0.6181778130, 0.8586578390, 0.7192248420, 
    0.7474223280, 0.3158837000, 0.4195541050, 0.0127864280, 0.8874799040, 0.1477586520, 0.8999473670, 
    0.5276169980, 0.9470855960, 0.7160979940, 0.4333313080, 0.4208612590, 0.2752791590, 0.9096810160, 
    0.8280318450, 0.2616534440, 0.2093843570, 0.7376558520, 0.9750347320, 0.0535337860, 0.3641396440, 
    0.6961150670, 0.9208780080, 0.3978530790, 0.3220875450, 0.6614071140, 0.5932535540, 0.3927629150, 
    0.7589952470, 0.1056177620, 0.7543309840, 0.4100838590, 0.4988831720, 0.3157900460, 0.9699188070, 
    0.2915892170, 0.8741460470, 0.0061683690, 0.0187947860, 0.2180413120, 0.2407128960, 0.3242213500, 
    0.7370501030, 0.6661054540, 0.0727051640, 0.3934830480, 0.7265323970, 0.2065430210, 0.3923935960, 
    0.3263746070, 0.7618185210, 0.9309249990, 0.6011011120, 0.2940702270, 0.3939786590, 0.3811837870, 
    0.2038728760, 0.3550759270, 0.4158928820, 0.8851639310, 0.8036311770, 0.7556925660, 0.7610991410, 
    0.5360371150, 0.0500874780, 0.8478820260, 0.2801940860, 0.2613827680, 0.4657592620, 0.9823236350, 
    0.8517895460, 0.2393273800, 0.9851715560, 0.9366086670, 0.3283378630, 0.5044030780, 0.9069526230, 
    0.4542105060, 0.4990375760, 0.7077889410, 0.6944372740, 0.4471188210, 0.8859364890, 0.5939801480, 
    0.0424850100, 0.3584274200, 0.7246210410, 0.9618283580, 0.2514383160, 0.6996159130, 0.3910769670, 
    0.3435971980, 0.4513523090, 0.8389464600, 0.1523799700, 0.1246148100, 0.5335628800, 0.8887637800, 
    0.9271676000, 0.0546961000, 0.8717203300, 0.3925355100, 0.5586495000, 0.4692550100, 0.6616619400, 
    0.1410878900, 0.0373085500, 0.2234407600, 0.8590639200, 0.9149628000, 0.5384841700, 0.2880248600, 
    0.6907999900, 0.3506774700, 0.7409692400, 0.4317924400, 0.1256138900, 0.4207858400, 0.6997751400, 
    0.9802148500, 0.4759578900, 0.1809511400, 0.8975837400, 0.1201974100, 0.6834291900, 0.0558764000, 
    0.4049848600, 0.9160810700, 0.1989909900, 0.1213520600, 0.8033950000, 0.1384234900, 0.5209476600, 
    0.5793481100, 0.8683967200, 0.3798209900, 0.6447286300, 0.3681900500, 0.5040454600, 0.0823215600, 
    0.8185163500, 0.3723439900, 0.5533316200, 0.4492821700, 0.2437953800, 0.7180344000, 0.1567509700, 
    0.7061269200, 0.6581254000, 0.4881764200, 0.7175133700, 0.3746927700, 0.5663169900, 0.0281822300, 
    0.8863996600, 0.9875116100, 0.3103271900, 0.1086570800, 0.0905694100, 0.6061741400, 0.6385566400, 
    0.3638215800, 0.8809434200, 0.1929888500, 0.5659784500, 0.8658003500, 0.9549010300, 0.9612429500, 
    0.1716759200, 0.3089237700, 0.4226080700, 0.7012464100, 0.4849366500, 0.7015972200, 0.8325283300, 
    0.7284517400, 0.3680126700, 0.6724828900, 0.7534805000, 0.9199055300, 0.6933934300, 0.9751218100, 
    0.9446897800, 0.2814035200, 0.4527989300, 0.6809883800, 0.2876399900, 0.5548953000, 0.8602102400, 
    0.1222369500, 0.2514385500, 0.8257072700, 0.2934683500, 0.6364977200, 0.3800786000, 0.8140737200, 
    0.5894016200, 0.5117440400, 0.5115294000, 0.4285089700, 0.9879196400, 0.8361083100, 0.1990860700, 
    0.2536320100, 0.3110010500, 0.0361254000, 0.3340876900, 0.2032582800, 0.3553546400, 0.1168942800, 
    0.3414603600, 0.6232475200, 0.2949805100, 0.6681325500, 0.3398295800, 0.8963215500, 0.6980940900, 
    0.0997092900, 0.3391848100, 0.7103539300, 0.2462007300, 0.6691904500, 0.2144532400, 0.1077504600, 
    0.2987360700, 0.1068829500, 0.9734265500, 0.9889497600, 0.9597803500, 0.4752311400, 0.1129725300, 
    0.3671543000, 0.2367440600, 0.9679402300, 0.1786796200, 0.9208188400, 0.7494437300, 0.4864061400, 
    0.3070633500, 0.9109680000, 0.7591075700, 0.4268269000, 0.3568160900, 0.9306835700, 0.3625027500, 
    0.8893640300, 0.1467563700, 0.9923119000, 0.5112130100, 0.6863040800, 0.8385499200, 0.4286154500, 
    0.8569072800, 0.8306089300, 0.8078801800, 0.1393323200, 0.5300094800, 0.2182344500, 0.8595796800, 
    0.2288875500, 0.4968153000, 0.3149205400, 0.8254266600, 0.6767463900, 0.2230903100, 0.8381724000, 
    0.2739925100, 0.3373712300, 0.8711498800, 0.9651359500, 0.3739678200, 0.0854448100, 0.9291991900, 
    0.2357012200, 0.2907871900, 0.1280165900, 0.1316873500, 0.4041049000, 0.4168877000, 0.5670119800, 
    0.4229625100, 0.1643120400, 0.4891877900, 0.2776053700, 0.6976064200, 0.8274502900, 0.4874308900, 
    0.7250596000, 0.6503749800, 0.2039333100, 0.1609130700, 0.6245570700, 0.1264162300, 0.6747788934, 
    0.6457891271, 0.3643365290, 0.9995219493, 0.8827708189, 0.6786562400, 0.2603363760, 0.4018020707, 
    0.0101785748, 0.4873921743, 0.3429851863, 0.2895678403, 0.4790630946, 0.3685035170, 0.9296060419, 
    0.5293606280, 0.1157865208, 0.4967994317, 0.2045601751, 0.0082852058, 0.3866910117, 0.0009472317, 
    0.8636559783, 0.4752417156, 0.5218528947, 0.5443784453, 0.1892349010, 0.4284725219, 0.9517078404, 
    0.5666448742, 0.0799620333, 0.0044371644, 0.0678412460, 0.1917967587, 0.3599016496, 0.8000916124, 
    0.3594282658, 0.5072350584, 0.2622901150, 0.8919167451, 0.7292640421, 0.7976099520, 0.3760313739, 
    0.0179410274, 0.5182905369, 0.2394095350, 0.2363489280, 0.7666831033, 0.0688136201, 0.5527229193, 
    0.2682658806, 0.2693803106, 0.9690254654, 0.9731362560, 0.1270776591, 0.8005079071, 0.9265561129, 
    0.1342062750, 0.7379696709, 0.0792362478, 0.8203584203, 0.4202279691, 0.5427466533, 0.6001499062, 
    0.5707600345, 0.9296874236, 0.9225545505, 0.4970232591, 0.9853899847, 0.9779855160, 0.2130448320, 
    0.7668617836, 0.6187773990, 0.5894525715, 0.3545607659, 0.4175856721, 0.3766711140, 0.0759502219, 
    0.8599137105, 0.3128095574, 0.5124408882, 0.7531193637, 0.5383322216, 0.9791060984, 0.2349636590, 
    0.6275620307, 0.1408275496, 0.8271595608, 0.3697280197, 0.3676202064, 0.2819242389, 0.0949480394, 
    0.5315801166, 0.8648093319, 0.2498755830, 0.2097390620, 0.6357937951, 0.6037441837, 0.6284155636, 
    0.1194773833, 0.2739826900, 0.2160445100, 0.4516037300, 0.1914226900, 0.1273074200, 0.2865896200, 
    0.1371501000, 0.2914566400, 0.1955386000, 0.3556856900, 0.2071495000, 0.0011700500, 0.4733652600, 
    0.3060020200, 0.3451804300, 0.8781696000, 0.3160270700, 0.1282229600, 0.0690958500, 0.4524710700, 
    0.6531534700, 0.6510329200, 0.9346146400, 0.3496337900, 0.3673784600, 0.3541129700, 0.7337217600, 
    0.4614525900, 0.3168694300, 0.2955482400, 0.2006580700, 0.6673372300, 0.5225416100, 0.2078643000, 
    0.7057675300, 0.8356055000, 0.7105372600, 0.0510969500, 0.7658270600, 0.2631301700, 0.6387465600, 
    0.3123159000, 0.3059953500, 0.0663704800, 0.3751467600, 0.7836896800, 0.0873492400, 0.5103036800, 
    0.5252214500, 0.4552816600, 0.4799214500, 0.8858325300, 0.4172003100, 0.8670164300, 0.4331734400, 
    0.1605655400, 0.4868319300, 0.2570067600, 0.9670993000, 0.2364060300, 0.1764797200, 0.7534479800, 
    0.1580902500, 0.4358131500, 0.8445908700, 0.3931795100, 0.4160178200, 0.2823065200, 0.4586475400, 
    0.5416208000, 0.2940924500, 0.0238527100, 0.4707389000, 0.1718143800, 0.3636703100, 0.1602052200, 
    0.9411435000, 0.4121965900, 0.3529837700, 0.8438846500, 0.9947873100, 0.4937838300, 0.1255906600, 
    0.1400879100, 0.9213867400, 0.2418918800, 0.8056600600, 0.5369996600, 0.3875320600, 0.0693823200, 
    0.8730862000, 0.4256870100, 0.3110491800, 0.9379214800, 0.9066130200, 0.0788620500, 0.8150226800, 
    0.5065153400, 0.1728877600, 0.8884946800
  };
  
  // Leaf regression basis
  output.omega = std::vector<double> {
    0.97801674, 0.34045661, 0.20528387, 0.76230322, 0.63244655, 0.61225851, 0.40492125, 0.33112223,
    0.86917047, 0.58444831, 0.33316433, 0.62217709, 0.96820668, 0.20778425, 0.23764591, 0.94193115,
    0.03869153, 0.60847765, 0.51535811, 0.81554404, 0.78515289, 0.23337815, 0.16730957, 0.02168331,
    0.08699654, 0.34067049, 0.93141264, 0.03679176, 0.4364772, 0.2644173, 0.23717182, 0.59084776,
    0.63438143, 0.57132227, 0.17568721, 0.15552373, 0.8625478, 0.02466334, 0.47269628, 0.97782225,
    0.90593388, 0.82272111, 0.67374992, 0.47619752, 0.5276532, 0.75182919, 0.09559243, 0.5126907,
    0.45892102, 0.11357212, 0.77861167, 0.78424907, 0.84693988, 0.38814934, 0.01010333, 0.10064384,
    0.68664865, 0.1264298, 0.14314708, 0.62679815, 0.71101772, 0.43504811, 0.8868721, 0.95098048,
    0.38291537, 0.71337451, 0.12109764, 0.68943347, 0.89878588, 0.67524475, 0.95549402, 0.58758459,
    0.68558459, 0.16794963, 0.23680754, 0.40289479, 0.98291039, 0.87276966, 0.76995475, 0.55282963,
    0.12448394, 0.5479543, 0.8718802, 0.14515363, 0.71311006, 0.39196408, 0.94504373, 0.44020353,
    0.24090674, 0.52675625, 0.86674581, 0.90576332, 0.09167602, 0.74795585, 0.26901811, 0.544173,
    0.03336554, 0.8314331, 0.27185696, 0.83434459
  };
  
  // Outcome
  output.outcome << 2.158854445, 1.175387297, 0.40481061, 1.751578365, 0.299641379, 0.347249942, 0.546179903,
             1.164750138, 3.389946886, -0.605464414, 1.271432631, 2.203609096, 2.192327323, 0.746140817,
             3.009233058, -0.292800298, 1.752730639, 1.824961588, 2.055603702, -0.153889672, 0.248010541,
             1.099472562, 0.822333874, 1.291797503, 0.877720106, 2.365239601, 0.685716301, 1.445624363,
             1.342180906, 0.148136818, -1.157010472, 2.186988614, 1.523371203, 1.740153725, 0.73351857,
             0.449967161, 1.25200968, 1.155083428, 1.580760814, 3.025557265, 1.488059405, -0.069025021,
             1.100181892, 1.014150762, 0.418207324, 3.210834777, 1.658875834, 2.215173806, 1.351802193,
             1.33331705, 2.357354695, -1.449598055, 1.042660314, 0.404779346, 1.35048031, -0.58922199,
             -0.281044393, 0.128478258, 0.006620112, 1.237840372, 1.0999817, 2.245489523, 2.114281687,
             1.337789336, 0.668884629, 2.275744698, 1.483665856, 0.577564239, -0.557180209, 3.810578895,
             0.946494502, 1.464014296, 0.793749131, 2.735140925, 2.037714409, 1.530792369, 1.857142205,
             1.015348805, -0.91839562, 1.924546112, -0.218826033, 1.761318971, 0.928338732, 1.109589807,
             2.165307398, 2.258640565, 1.147428989, 0.332872857, 0.373646084, 0.520770108, 1.857996323,
             -1.971537882, 0.962010578, 1.552073631, 0.459464684, -0.149159276, 0.203079262, -0.453721958, 2.152977755, 0.948865461;
  
  // Random effects regression basis (i.e. constant, intercept-only RFX model)
  output.rfx_basis = std::vector<double>{
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  
  // Random effects group labels
  for (int i = 0; i < output.n/2; i++) {
    if (i % 2 == 0) {
      output.rfx_groups[i] = 1;
    } else {
      output.rfx_groups[i] = 2;
    }
  }

  return output;
}

}

}  // namespace StochTree
